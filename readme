Работа начата 10.04.2022
Работа завершена 24.04.2022
        Продолжалась вплоть до 05.06.2022

Разработчик: Калинушкин Владимир, ya-vladimir-93@yandex.ru

    Программа "Small_calculator" представляет собой простой консольный калькулятор.

    Стандартными средствами консоли производятся вычисления - простые арифметические действия.

    Идея программы взята из учебников Строуструпа по языку прогаммирования C++, и переработана (Бьярне Строуструп, "Программирование: принципы и практика использования C++", 2009 год).

    Основным посылом программы является разделение постоянного потока входных данных на лексемы и непрерывная их обработка.


    В программе приняты следующие условности:

    const char exit_simbol = 'q' - обозначает конец вычислений
    const char* promt = ">>" - выводит приглашение к вводу
    const char* print_result = ": " - предваряет вывод результата
    const char print = ';' - указывает программе, что выражение завершено
    const char equality = '=' - Зарезервировано для обработки переменных

    const char type_is_number = 'n' - для класса Token, означает, что токен - число
    const char type_is_constante = 'c' - то же, зарезервировано для констант
    const char type_is_keyword = 'k' - то же, зарезервировано для ключевых слов
    const char type_is_varriable = 'v' - то же, зарезервировано для переменных
    const char type_is_function = 'f' - то же, зарезервировано для имен функций
    const char type_is_word = 'w' - токен есть слово, для дальнейшей обработки следует вызвать соответствующий обработчик

    const char* inicialise_word = "var" - имя ключевого слова, предназначенного для инициализации переменной
    const double pi = 3.14159265 - Значение числа ПИ
    const char* pi_name = "pi" - Имя для константы "pi"
    const double e = 2.71828 - Значение числа Эйлера
    const char* e_name - имя для константы эйлера

    Имена Функций:
    const char* cos_name = "cos";
    const char* sin_name = "sin";
    const char* tan_name = "tn";
    const char* asin_name = "asin";
    const char* acos_name = "acos";
    const char* atan_name = "atan";
    const char* sqrt_name = "sqrt";
    const char* abs_name = "abs";
    const char* ln_name = "ln";
    const char* log_name = "log";
    const char* ceil_name = "ceil";
    const char* floor_name = "floor";
    const char* fmod_name = "fmod";

    Реализация TokenStram изменена: TokenStream::get() запрашивает метод Token::get(), который запрашивает данные из стандартного потока.

    При получении новой лексемы TokenStream::get() проверяет соответствующие векторы (ключевых слов, переменных, констант и имен функций - если лексема - Слово) - приватный метод TokenStream::set_Token_type - и указывает тип лексемы; если Слова нет в векторах, Лексема помечается как type_is_word.

    Поток лексем TokenStream::Stream Объявлен в заголовке программы. Константы, имена функций и ключевые слова первично инициализируются в теле main(), реализация инициализатора находится в заголовке Small_calculator.h.

    Список констант, ключевых слов, имен функций и переменных хранится в объекте Stream класса TokenStram соответственно в векторах ConstantesStream, KeyWordsStream, FunctionsNameStream, VarriablesStream. Там же находится вектор виртуального потока Stream. Все эти векторы находятся в зоне private, для общения с внешним миром используются методы get() и putback(Token). Для первичной инициализации списков констант, ключевых слов и имен функций используются методы соответственно inicialise_Constantes(Constantes a), inicialise_KeyWords(KeyWords a) и inicialise_FunctionsName(FunctionsName a). Их инициализацию приходится делать поштучно в заголовке Small_calculator.h.

    Для логического отделения типов лексем лексемы хранятся в лексемах разных типоов: type_is_constante, type_is_keyword, type_is_function.
    В соответствии с типом лексемы происходит ветвление этапов вычислений.

    Объект Stream - глобальный, инициализация данных производится меотдами класса, не напрямую.


    Изменена логика программы:

        Третий уровень:
            Второй уровень + Второй уровень
            Второй уровень - Второй уровень
            Второй уровень

        Второй уровень:
            Первый уровень * Первый уровень
            Первый уровень / Первый уровень
            Первый уровень


        Первый уровень:
            Первичное выражение ^ Первичное выражение (возведение в степень)

        Первичное Выражение:
            + Первичное Выражение
            - Первичное Выражение
            ( Первичное Выражение )
            Число
            Переменная
            Константа
            Функция

        Функция:
            [Имя функции] Первичное Выражение
            [Имя функции] ( Первичное Выражение, Первичное выражение )

        Переменная:
            [Имя, Число]

        Константа:
            [Имя, Число]

        Ключевые слова:
            [ Имя ]

        Объявление переменной:
            Ключевое слово [ var ],  Новое имя, '=', Первичное Выражение

        Изменение переменной:
            'Имя Переменной', '=', Первичное Выражение

        Новое имя: Любое Слово, не использовавшееся ранее

5.06.2022: Важное замечание! Функчия  math_function() весьма специфична. Из-особенностей математических функций при вычислениях операнды проходят множество проверок. Будьте внимательны!
